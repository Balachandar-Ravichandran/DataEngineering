{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfdepoc"
		},
		"Ls_ASASL_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Ls_ASASL'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"LS_Azure_Key_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://depockv.vault.azure.net/"
		},
		"LS_Blob_withKeyVault_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "BlobContainerKey"
		},
		"Ls_ASASL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stdepocl.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CDC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyTemptable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "00landing/Players",
									"wildcardFileName": "Player_1.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "delete  [dbo].[tbltemp_Player]\n"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LandingInputPlayers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CDC_HashKey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Players": {},
									"source1": {},
									"Control": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-04T01:07:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LandingInputPlayers')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/dataflows/CDC_HashKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataValidation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowValidDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataValidDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesData": {},
									"ValidSink": {},
									"InvalidSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-01-21T01:35:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataValidDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataValidation2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowValidation",
								"type": "DataFlowReference",
								"parameters": {
									"Condition_1": {
										"value": "@pipeline().parameters.Condition1",
										"type": "Expression"
									},
									"Source_Name": {
										"value": "'@{pipeline().parameters.FileName}'",
										"type": "Expression"
									},
									"variables_1": {
										"value": "'@{pipeline().parameters.Variable1}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DataValid": {},
									"ValidSink": {},
									"InValidSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"Condition1": {
						"type": "string",
						"defaultValue": "AU-2015-1"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"Variable1": {
						"type": "string",
						"defaultValue": "Order ID"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-30T15:03:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowValidation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileCountValidation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set file name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Flag file Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@Concat(pipeline().parameters.FileName,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set file name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@less(int(variables('Count Index')),int(variables('Iteration Index')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@variables('FileName')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": {
													"value": "@int(variables('Count Index'))",
													"type": "Expression"
												}
											}
										},
										"dataset": {
											"referenceName": "LandingInputfiles",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "filecount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileCount",
										"value": {
											"value": "@string(add(int(variables('Count Index')),int(activity('Lookup1').output.count)))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "countindex",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "filecount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count Index",
										"value": {
											"value": "@string(int(variables('FileCount')))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "iteration",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "countindex",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Iteration",
										"value": {
											"value": "@string(add(int(variables('Iteration Index')),5000))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IterationIndex",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "iteration",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Iteration Index",
										"value": {
											"value": "@variables('Iteration')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "File Count",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "finalcount",
							"value": {
								"value": "@variables('Count Index')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Flag file",
						"description": "Copy Flag to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "00landing/Sales",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DF_Inputfile_flag",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Flag file Count",
						"description": "Get value from Flag file",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Flag file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@Concat('select  RowC from dbo.FileCount where TableName =''', pipeline().parameters.FileName,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "validate Count",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "File Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('finalcount')),int(activity('Flag file Count').output.firstRow.RowC))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy to invalid",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@Concat(pipeline().parameters.FileName,'.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LandingInputfiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "InvalidSink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Get Config",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select ConditionalValue from dbo.DataValidationConfig where tablename = ''',pipeline().parameters.FileName,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "DataFlowValidation",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Get Config",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowValidation",
											"type": "DataFlowReference",
											"parameters": {
												"Condition_1": {
													"value": "@activity('Get Config').output.firstRow.ConditionalValue",
													"type": "Expression"
												},
												"Source_Name": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"variables_1": {
													"value": "'@{variables('check false')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DataValid": {},
												"ValidSink": {},
												"InValidSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Sales"
					}
				},
				"variables": {
					"FileCount": {
						"type": "String",
						"defaultValue": "0"
					},
					"FileName": {
						"type": "String"
					},
					"Iteration": {
						"type": "String",
						"defaultValue": "0"
					},
					"Iteration Index": {
						"type": "String",
						"defaultValue": "0"
					},
					"Count Index": {
						"type": "String",
						"defaultValue": "0"
					},
					"finalcount": {
						"type": "String"
					},
					"ValidCount": {
						"type": "String"
					},
					"check True": {
						"type": "String",
						"defaultValue": "0"
					},
					"check false": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-30T17:59:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DF_Inputfile_flag')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/LandingInputfiles')]",
				"[concat(variables('factoryId'), '/datasets/InvalidSink')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowValidation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DF_Inputfile_flag",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select  RowC from dbo.FileCount where TableName = 'Sales'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute FileCount",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FileCountValidation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute FileCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ValidCountP",
							"value": {
								"value": "@string(int(activity('Lookup1').output.firstRow.RowC))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ValidCountP",
							"value": {
								"value": "@variables('FileCountP')",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"ValidCountP": {
						"type": "String",
						"defaultValue": "0"
					},
					"FileCountP": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-30T06:28:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DF_Inputfile_flag')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/pipelines/FileCountValidation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidationModule')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('select isCountValidRequired,isDataValidRequired from dbo.ValidationConfig where tablename =''',pipeline().parameters.FileName,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IsCountAndDataValidationRequired",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Lookup1').output.firstRow.isCountValidRequired,true),equals(activity('Lookup1').output.firstRow.isDataValidRequired,true))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FileCountValidation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "IsCountValidationRequired",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IsCountAndDataValidationRequired",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Lookup1').output.firstRow.isCountValidRequired,true),equals(activity('Lookup1').output.firstRow.isDataValidRequired,false))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FileCountValidation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "IsDataValidationRequired",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IsCountValidationRequired",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Lookup1').output.firstRow.isCountValidRequired,false),equals(activity('Lookup1').output.firstRow.isDataValidRequired,true))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DataFlowValidation_copy1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowValidation",
											"type": "DataFlowReference",
											"parameters": {
												"Condition_1": {
													"value": "@activity('Get Config').output.firstRow.ConditionalValue",
													"type": "Expression"
												},
												"Source_Name": {
													"value": "'@{pipeline().parameters.FileName}'",
													"type": "Expression"
												},
												"variables_1": {
													"value": "'@{variables('dummy')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DataValid": {},
												"ValidSink": {},
												"InValidSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "IsNoValidationRequired",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IsDataValidationRequired",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Lookup1').output.firstRow.isCountValidRequired,false),equals(activity('Lookup1').output.firstRow.isDataValidRequired,false))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy to valid",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@Concat(pipeline().parameters.FileName,'.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LandingInputfiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Valid_OutputDS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Config",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('select ConditionalValue from dbo.DataValidationConfig where tablename = ''',pipeline().parameters.FileName,'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "Sales"
					}
				},
				"variables": {
					"dummy": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-30T18:03:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/pipelines/FileCountValidation')]",
				"[concat(variables('factoryId'), '/dataflows/DataFlowValidation')]",
				"[concat(variables('factoryId'), '/datasets/LandingInputfiles')]",
				"[concat(variables('factoryId'), '/datasets/Valid_OutputDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CDC_RAW_Player')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00raw/Players",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSC_RAW_Input_Player')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00raw/Players",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Inputfile_flag')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_withKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Az_Valid_Input_Sample_Flag.csv",
						"folderPath": "00landing/Sales",
						"container": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Aging",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Product Category",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": " Sales ",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": " Profit ",
						"type": "String"
					},
					{
						"name": " Shipping Cost ",
						"type": "String"
					},
					{
						"name": "Order Priority",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Months",
						"type": "String"
					},
					{
						"name": "Number of Shipping Days",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Blob_withKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00raw/Sales",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvalidSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00landing/InvalidData",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvalidSink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00landing/InvalidData",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					},
					{
						"name": "Prop_19",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					},
					{
						"name": "Prop_21",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LandingData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00landing/Sales",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Aging",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Product Category",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": " Sales ",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": " Profit ",
						"type": "String"
					},
					{
						"name": " Shipping Cost ",
						"type": "String"
					},
					{
						"name": "Order Priority",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Months",
						"type": "String"
					},
					{
						"name": "Number of Shipping Days",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LandingInputPlayers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00landing/Players",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "S.No",
						"type": "String"
					},
					{
						"name": "PlayerName",
						"type": "String"
					},
					{
						"name": "TotalMatches",
						"type": "String"
					},
					{
						"name": "TotalScore",
						"type": "String"
					},
					{
						"name": "TotalWicket",
						"type": "String"
					},
					{
						"name": "Last_m",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LandingInputfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Blob_withKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "00landing/Sales",
						"container": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Blob_withKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "RowCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbltemp_Player"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00raw/Sales",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Valid_InputDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Az_Valid_Input_Sample.csv",
						"folderPath": "00landing/Sales",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Aging",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Product Category",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": " Sales ",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": " Profit ",
						"type": "String"
					},
					{
						"name": " Shipping Cost ",
						"type": "String"
					},
					{
						"name": "Order Priority",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Months",
						"type": "String"
					},
					{
						"name": "Number of Shipping Days",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Valid_OutputDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_ASASL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "00raw",
						"fileSystem": "edhpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Aging",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Product Category",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": " Sales ",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": " Profit ",
						"type": "String"
					},
					{
						"name": " Shipping Cost ",
						"type": "String"
					},
					{
						"name": "Order Priority",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Months",
						"type": "String"
					},
					{
						"name": "Number of Shipping Days",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_ASASL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_Key')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"LS_Annotation"
				],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_Azure_Key_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Blob_withKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Azure_Key",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_Blob_withKeyVault_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_Key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_ASASL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Ls_ASASL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Ls_ASASL_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CDC_HashKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LandingInputPlayers",
								"type": "DatasetReference"
							},
							"name": "Players"
						},
						{
							"dataset": {
								"referenceName": "CSC_RAW_Input_Player",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "CSC_RAW_Input_Player",
								"type": "DatasetReference"
							},
							"name": "Control"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CDC_RAW_Player",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedHashID"
						},
						{
							"name": "Lookup1"
						}
					],
					"script": "source(output(\n\t\t{S.No} as string,\n\t\tPlayerName as string,\n\t\tTotalMatches as string,\n\t\tTotalScore as string,\n\t\tTotalWicket as string,\n\t\tLast_m as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['00landing/Players/Player_1.csv']) ~> Players\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['00raw/Players/Player']) ~> source1\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['00raw/Players/Master_Player.csv']) ~> Control\nPlayers derive(HashID = sha2(512, {S.No},PlayerName,TotalMatches,TotalScore,TotalWicket,Last_m),\n\t\tVersionID = 1) ~> DerivedHashID\nsource1, Control lookup(source1@Column_1 == Control@Column_1,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nDerivedHashID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Player'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LandingInputPlayers')]",
				"[concat(variables('factoryId'), '/datasets/CSC_RAW_Input_Player')]",
				"[concat(variables('factoryId'), '/datasets/CDC_RAW_Player')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowValidation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LandingData",
								"type": "DatasetReference"
							},
							"name": "DataValid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ValidSink",
								"type": "DatasetReference"
							},
							"name": "ValidSink"
						},
						{
							"dataset": {
								"referenceName": "InvalidSink2",
								"type": "DatasetReference"
							},
							"name": "InValidSink"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "parameters{\n\tCondition_1 as boolean,\n\tSource_Name as string,\n\tvariables_1 as string\n}\nsource(output(\n\t\t{Order ID} as string,\n\t\t{Order Date} as string,\n\t\t{Ship Date} as string,\n\t\tAging as integer,\n\t\t{Ship Mode} as string,\n\t\t{Product Category} as string,\n\t\tProduct as string,\n\t\t{ Sales } as string,\n\t\tQuantity as string,\n\t\tDiscount as string,\n\t\t{ Profit } as string,\n\t\t{ Shipping Cost } as string,\n\t\t{Order Priority} as string,\n\t\t{Customer ID} as string,\n\t\t{Customer Name} as string,\n\t\tSegment as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string,\n\t\tRegion as string,\n\t\tMonths as string,\n\t\t{Number of Shipping Days} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[(add('00landing/Sales/',add($Source_Name,'.csv')))]) ~> DataValid\nDataValid split(isNull({Order ID}) == $Condition_1,\n\tdisjoint: false) ~> ConditionalSplit1@(ValidDataStream, InValidDataStream)\nConditionalSplit1@ValidDataStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(add($Source_Name,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ValidSink\nConditionalSplit1@InValidDataStream sink(input(\n\t\tProp_0 as string,\n\t\tProp_1 as string,\n\t\tProp_2 as string,\n\t\tProp_3 as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string,\n\t\tProp_7 as string,\n\t\tProp_8 as string,\n\t\tProp_9 as string,\n\t\tProp_10 as string,\n\t\tProp_11 as string,\n\t\tProp_12 as string,\n\t\tProp_13 as string,\n\t\tProp_14 as string,\n\t\tProp_15 as string,\n\t\tProp_16 as string,\n\t\tProp_17 as string,\n\t\tProp_18 as string,\n\t\tProp_19 as string,\n\t\tProp_20 as string,\n\t\tProp_21 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(add(add($Source_Name,'_DataInvalid'),'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InValidSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LandingData')]",
				"[concat(variables('factoryId'), '/datasets/ValidSink')]",
				"[concat(variables('factoryId'), '/datasets/InvalidSink2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataValidDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Inputfile_flag",
								"type": "DatasetReference"
							},
							"name": "SalesData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "ValidSink"
						},
						{
							"dataset": {
								"referenceName": "InvalidSink",
								"type": "DatasetReference"
							},
							"name": "InvalidSink"
						}
					],
					"transformations": [
						{
							"name": "ValidCondition"
						}
					],
					"script": "source(output(\n\t\t{Order ID} as string,\n\t\t{Order Date} as string,\n\t\t{Ship Date} as string,\n\t\tAging as string,\n\t\t{Ship Mode} as string,\n\t\t{Product Category} as string,\n\t\tProduct as string,\n\t\t{ Sales } as string,\n\t\tQuantity as string,\n\t\tDiscount as string,\n\t\t{ Profit } as string,\n\t\t{ Shipping Cost } as string,\n\t\t{Order Priority} as string,\n\t\t{Customer ID} as string,\n\t\t{Customer Name} as string,\n\t\tSegment as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string,\n\t\tRegion as string,\n\t\tMonths as string,\n\t\t{Number of Shipping Days} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SalesData\nSalesData split(isNull({Order ID}) == false()&&isNull({Order Date}) == false()&&{Order Date}<{Ship Date},\n\tdisjoint: false) ~> ValidCondition@(ValidStream, InValidStream)\nValidCondition@ValidStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Sales'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ValidSink\nValidCondition@InValidStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesIV'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InvalidSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DF_Inputfile_flag')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/InvalidSink')]"
			]
		}
	]
}